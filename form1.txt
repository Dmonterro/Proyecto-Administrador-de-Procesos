using System;
using System.Diagnostics;
using System.Drawing;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;

namespace pruebac
{
    public partial class Form1 : Form
    {
        private string selectedProcessName;
        private PerformanceCounter cpuCounter;
        private PerformanceCounter ramCounter;
        private PerformanceCounter diskCounter;
        private bool isDarkMode = false; // Variable para controlar el modo oscuro/claro

        // Labels para mostrar el nombre del proceso en cada gráfico
        private Label lblCPUProcessName;
        private Label lblRAMProcessName;
        private Label lblDiskProcessName;

        public Form1()
        {
            InitializeComponent();
            InitializeDataGridView();
            InitializePerformanceCounters();
            InitializeCharts();
            InitializeLabels(); // Inicializar etiquetas para nombres de procesos
            LoadProcesses();
            timer1.Start();
            // Configurar el evento Click del botón de cambio de tema
            btnToggleTheme.Click += ToggleTheme;
        }

        private void InitializeDataGridView()
        {
            dataGridViewProcesses.ColumnCount = 5;
            dataGridViewProcesses.Columns[0].Name = "ID";
            dataGridViewProcesses.Columns[1].Name = "Nombre";
            dataGridViewProcesses.Columns[2].Name = "Prioridad";
            dataGridViewProcesses.Columns[3].Name = "Memoria Física (MB)";
            dataGridViewProcesses.Columns[4].Name = "Memoria Virtual (MB)";

            dataGridViewProcesses.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            dataGridViewProcesses.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
            dataGridViewProcesses.MultiSelect = false;
        }

        private void InitializePerformanceCounters()
        {
            cpuCounter = new PerformanceCounter("Processor", "% Processor Time", "_Total");
            ramCounter = new PerformanceCounter("Memory", "Available MBytes");
            diskCounter = new PerformanceCounter("PhysicalDisk", "% Disk Time", "_Total");
        }

        private void InitializeCharts()
        {
            // Configuración para chartCPU
            chartCPU.Series.Clear();
            Series cpuSeries = new Series("CPU")
            {
                ChartType = SeriesChartType.Line,
                XValueType = ChartValueType.DateTime
            };
            chartCPU.Series.Add(cpuSeries);
            chartCPU.ChartAreas.Add(new ChartArea());

            // Configuración para chartRAM
            chartRAM.Series.Clear();
            Series ramSeries = new Series("RAM")
            {
                ChartType = SeriesChartType.Line,
                XValueType = ChartValueType.DateTime
            };
            chartRAM.Series.Add(ramSeries);
            chartRAM.ChartAreas.Add(new ChartArea());

            // Configuración para chartDisk
            chartDisk.Series.Clear();
            Series diskSeries = new Series("Disco")
            {
                ChartType = SeriesChartType.Line,
                XValueType = ChartValueType.DateTime
            };
            chartDisk.Series.Add(diskSeries);
            chartDisk.ChartAreas.Add(new ChartArea());

            // Ajustar la posición de los gráficos hacia abajo
            chartCPU.Location = new Point(10, 300);
            chartRAM.Location = new Point(chartCPU.Right + 20, 300);
            chartDisk.Location = new Point(chartRAM.Right + 20, 300);
        }

        private void InitializeLabels()
        {
            // Inicialización de etiquetas para nombres de procesos
            lblCPUProcessName = new Label() { Text = "Proceso CPU", AutoSize = true };
            lblRAMProcessName = new Label() { Text = "Proceso RAM", AutoSize = true };
            lblDiskProcessName = new Label() { Text = "Proceso Disco", AutoSize = true };

            // Ajustar posición de las etiquetas justo arriba de cada gráfico
            lblCPUProcessName.Location = new Point(chartCPU.Left, chartCPU.Top - 25);
            lblRAMProcessName.Location = new Point(chartRAM.Left, chartRAM.Top - 25);
            lblDiskProcessName.Location = new Point(chartDisk.Left, chartDisk.Top - 25);

            // Añadir etiquetas al formulario
            Controls.Add(lblCPUProcessName);
            Controls.Add(lblRAMProcessName);
            Controls.Add(lblDiskProcessName);
        }

        private void LoadProcesses()
        {
            dataGridViewProcesses.Rows.Clear();
            foreach (Process proc in Process.GetProcesses())
            {
                try
                {
                    dataGridViewProcesses.Rows.Add(
                        proc.Id,
                        proc.ProcessName,
                        proc.BasePriority,
                        proc.WorkingSet64 / 1024 / 1024, // Convertir a MB
                        proc.VirtualMemorySize64 / 1024 / 1024 // Convertir a MB
                    );
                }
                catch
                {
                    // Manejo de errores por permisos o procesos protegidos
                }
            }
        }

        private void btnUpdate_Click(object sender, EventArgs e)
        {
            LoadProcesses();
        }

        private void btnKillProcess_Click(object sender, EventArgs e)
        {
            if (dataGridViewProcesses.SelectedRows.Count > 0)
            {
                int processId = (int)dataGridViewProcesses.SelectedRows[0].Cells[0].Value;
                try
                {
                    Process proc = Process.GetProcessById(processId);
                    proc.Kill();
                    LoadProcesses();
                    MessageBox.Show($"Proceso {processId} terminado.");
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error al terminar el proceso: {ex.Message}");
                }
            }
            else
            {
                MessageBox.Show("Por favor, seleccione un proceso para finalizar.");
            }
        }

        private void dataGridViewProcesses_MouseClick(object sender, MouseEventArgs e)
        {
            if (dataGridViewProcesses.SelectedRows.Count > 0)
            {
                selectedProcessName = dataGridViewProcesses.SelectedRows[0].Cells[1].Value.ToString();
                UpdateLabels(); // Actualizar etiquetas con el nombre del proceso seleccionado
            }
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            LoadProcesses();
            UpdateCharts();
        }

        private void UpdateCharts()
        {
            // Actualiza la gráfica de CPU
            chartCPU.Series["CPU"].Points.AddXY(DateTime.Now, cpuCounter.NextValue());

            // Actualiza la gráfica de RAM
            chartRAM.Series["RAM"].Points.AddXY(DateTime.Now, ramCounter.NextValue());

            // Actualiza la gráfica de Disco
            chartDisk.Series["Disco"].Points.AddXY(DateTime.Now, diskCounter.NextValue());

            // Limitar la cantidad de puntos mostrados en la gráfica
            LimitChartPoints(chartCPU);
            LimitChartPoints(chartRAM);
            LimitChartPoints(chartDisk);
        }

        private void LimitChartPoints(Chart chart)
        {
            if (chart.Series[0].Points.Count > 30) // Mantener un máximo de 30 puntos
            {
                chart.Series[0].Points.RemoveAt(0);
            }
        }

        private void UpdateLabels()
        {
            lblCPUProcessName.Text = $"Proceso CPU: {selectedProcessName}";
            lblRAMProcessName.Text = $"Proceso RAM: {selectedProcessName}";
            lblDiskProcessName.Text = $"Proceso Disco: {selectedProcessName}";
        }

        private void ToggleTheme(object sender, EventArgs e)
        {
            // Alternar entre modo oscuro y claro
            isDarkMode = !isDarkMode;
            ApplyTheme();
        }

        private void ApplyTheme()
        {
            // Aplicar colores de fondo y de texto según el modo actual
            var bgColor = isDarkMode ? Color.Black : Color.White;
            var fgColor = isDarkMode ? Color.White : Color.Black;

            this.BackColor = bgColor;

            // Configurar DataGridView
            dataGridViewProcesses.BackgroundColor = bgColor;
            dataGridViewProcesses.ForeColor = fgColor;
            dataGridViewProcesses.ColumnHeadersDefaultCellStyle.BackColor = bgColor;
            dataGridViewProcesses.ColumnHeadersDefaultCellStyle.ForeColor = fgColor;
            dataGridViewProcesses.RowsDefaultCellStyle.BackColor = bgColor;
            dataGridViewProcesses.RowsDefaultCellStyle.ForeColor = fgColor;
            dataGridViewProcesses.AlternatingRowsDefaultCellStyle.BackColor = isDarkMode ? Color.Gray : Color.White;

            // Configurar etiquetas
            lblCPUProcessName.ForeColor = fgColor;
            lblRAMProcessName.ForeColor = fgColor;
            lblDiskProcessName.ForeColor = fgColor;

            // Cambiar colores de los gráficos
            foreach (var chart in new[] { chartCPU, chartRAM, chartDisk })
            {
                chart.BackColor = bgColor;
                chart.ChartAreas[0].BackColor = bgColor;
                chart.ChartAreas[0].AxisX.LabelStyle.ForeColor = fgColor;
                chart.ChartAreas[0].AxisY.LabelStyle.ForeColor = fgColor;
                chart.ChartAreas[0].AxisX.LineColor = fgColor;
                chart.ChartAreas[0].AxisY.LineColor = fgColor;
                chart.ChartAreas[0].AxisX.MajorGrid.LineColor = fgColor;
                chart.ChartAreas[0].AxisY.MajorGrid.LineColor = fgColor;
                foreach (var series in chart.Series)
                {
                    series.Color = isDarkMode ? Color.LightGreen : Color.Blue;
                }
            }
        }

        private void dataGridViewProcesses_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
    }
}